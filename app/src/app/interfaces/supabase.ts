/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/day_event_mask": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.day_event_mask.id"];
          geom?: parameters["rowFilter.day_event_mask.geom"];
          bounds?: parameters["rowFilter.day_event_mask.bounds"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["day_event_mask"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/icon": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.icon.id"];
          name?: parameters["rowFilter.icon.name"];
          storage_path?: parameters["rowFilter.icon.storage_path"];
          inserted_at?: parameters["rowFilter.icon.inserted_at"];
          public?: parameters["rowFilter.icon.public"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["icon"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** icon */
          icon?: definitions["icon"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.icon.id"];
          name?: parameters["rowFilter.icon.name"];
          storage_path?: parameters["rowFilter.icon.storage_path"];
          inserted_at?: parameters["rowFilter.icon.inserted_at"];
          public?: parameters["rowFilter.icon.public"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.icon.id"];
          name?: parameters["rowFilter.icon.name"];
          storage_path?: parameters["rowFilter.icon.storage_path"];
          inserted_at?: parameters["rowFilter.icon.inserted_at"];
          public?: parameters["rowFilter.icon.public"];
        };
        body: {
          /** icon */
          icon?: definitions["icon"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/artist": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.artist.id"];
          name?: parameters["rowFilter.artist.name"];
          description?: parameters["rowFilter.artist.description"];
          storage_path?: parameters["rowFilter.artist.storage_path"];
          spotify?: parameters["rowFilter.artist.spotify"];
          tidal?: parameters["rowFilter.artist.tidal"];
          apple_music?: parameters["rowFilter.artist.apple_music"];
          soundcloud?: parameters["rowFilter.artist.soundcloud"];
          youtube?: parameters["rowFilter.artist.youtube"];
          instagram?: parameters["rowFilter.artist.instagram"];
          facebook?: parameters["rowFilter.artist.facebook"];
          webpage?: parameters["rowFilter.artist.webpage"];
          inserted_at?: parameters["rowFilter.artist.inserted_at"];
          public?: parameters["rowFilter.artist.public"];
          bandcamp?: parameters["rowFilter.artist.bandcamp"];
          ts?: parameters["rowFilter.artist.ts"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["artist"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** artist */
          artist?: definitions["artist"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.artist.id"];
          name?: parameters["rowFilter.artist.name"];
          description?: parameters["rowFilter.artist.description"];
          storage_path?: parameters["rowFilter.artist.storage_path"];
          spotify?: parameters["rowFilter.artist.spotify"];
          tidal?: parameters["rowFilter.artist.tidal"];
          apple_music?: parameters["rowFilter.artist.apple_music"];
          soundcloud?: parameters["rowFilter.artist.soundcloud"];
          youtube?: parameters["rowFilter.artist.youtube"];
          instagram?: parameters["rowFilter.artist.instagram"];
          facebook?: parameters["rowFilter.artist.facebook"];
          webpage?: parameters["rowFilter.artist.webpage"];
          inserted_at?: parameters["rowFilter.artist.inserted_at"];
          public?: parameters["rowFilter.artist.public"];
          bandcamp?: parameters["rowFilter.artist.bandcamp"];
          ts?: parameters["rowFilter.artist.ts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.artist.id"];
          name?: parameters["rowFilter.artist.name"];
          description?: parameters["rowFilter.artist.description"];
          storage_path?: parameters["rowFilter.artist.storage_path"];
          spotify?: parameters["rowFilter.artist.spotify"];
          tidal?: parameters["rowFilter.artist.tidal"];
          apple_music?: parameters["rowFilter.artist.apple_music"];
          soundcloud?: parameters["rowFilter.artist.soundcloud"];
          youtube?: parameters["rowFilter.artist.youtube"];
          instagram?: parameters["rowFilter.artist.instagram"];
          facebook?: parameters["rowFilter.artist.facebook"];
          webpage?: parameters["rowFilter.artist.webpage"];
          inserted_at?: parameters["rowFilter.artist.inserted_at"];
          public?: parameters["rowFilter.artist.public"];
          bandcamp?: parameters["rowFilter.artist.bandcamp"];
          ts?: parameters["rowFilter.artist.ts"];
        };
        body: {
          /** artist */
          artist?: definitions["artist"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/asset": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.asset.id"];
          description?: parameters["rowFilter.asset.description"];
          geom?: parameters["rowFilter.asset.geom"];
          asset_type_id?: parameters["rowFilter.asset.asset_type_id"];
          icon_id?: parameters["rowFilter.asset.icon_id"];
          event_id?: parameters["rowFilter.asset.event_id"];
          inserted_at?: parameters["rowFilter.asset.inserted_at"];
          public?: parameters["rowFilter.asset.public"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["asset"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** asset */
          asset?: definitions["asset"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.asset.id"];
          description?: parameters["rowFilter.asset.description"];
          geom?: parameters["rowFilter.asset.geom"];
          asset_type_id?: parameters["rowFilter.asset.asset_type_id"];
          icon_id?: parameters["rowFilter.asset.icon_id"];
          event_id?: parameters["rowFilter.asset.event_id"];
          inserted_at?: parameters["rowFilter.asset.inserted_at"];
          public?: parameters["rowFilter.asset.public"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.asset.id"];
          description?: parameters["rowFilter.asset.description"];
          geom?: parameters["rowFilter.asset.geom"];
          asset_type_id?: parameters["rowFilter.asset.asset_type_id"];
          icon_id?: parameters["rowFilter.asset.icon_id"];
          event_id?: parameters["rowFilter.asset.event_id"];
          inserted_at?: parameters["rowFilter.asset.inserted_at"];
          public?: parameters["rowFilter.asset.public"];
        };
        body: {
          /** asset */
          asset?: definitions["asset"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/day": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.day.id"];
          day?: parameters["rowFilter.day.day"];
          inserted_at?: parameters["rowFilter.day.inserted_at"];
          public?: parameters["rowFilter.day.public"];
          name?: parameters["rowFilter.day.name"];
          description?: parameters["rowFilter.day.description"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["day"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** day */
          day?: definitions["day"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.day.id"];
          day?: parameters["rowFilter.day.day"];
          inserted_at?: parameters["rowFilter.day.inserted_at"];
          public?: parameters["rowFilter.day.public"];
          name?: parameters["rowFilter.day.name"];
          description?: parameters["rowFilter.day.description"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.day.id"];
          day?: parameters["rowFilter.day.day"];
          inserted_at?: parameters["rowFilter.day.inserted_at"];
          public?: parameters["rowFilter.day.public"];
          name?: parameters["rowFilter.day.name"];
          description?: parameters["rowFilter.day.description"];
        };
        body: {
          /** day */
          day?: definitions["day"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/event": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event.id"];
          name?: parameters["rowFilter.event.name"];
          description?: parameters["rowFilter.event.description"];
          geom?: parameters["rowFilter.event.geom"];
          style?: parameters["rowFilter.event.style"];
          day_id?: parameters["rowFilter.event.day_id"];
          inserted_at?: parameters["rowFilter.event.inserted_at"];
          public?: parameters["rowFilter.event.public"];
          bounds?: parameters["rowFilter.event.bounds"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["event"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** event */
          event?: definitions["event"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event.id"];
          name?: parameters["rowFilter.event.name"];
          description?: parameters["rowFilter.event.description"];
          geom?: parameters["rowFilter.event.geom"];
          style?: parameters["rowFilter.event.style"];
          day_id?: parameters["rowFilter.event.day_id"];
          inserted_at?: parameters["rowFilter.event.inserted_at"];
          public?: parameters["rowFilter.event.public"];
          bounds?: parameters["rowFilter.event.bounds"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event.id"];
          name?: parameters["rowFilter.event.name"];
          description?: parameters["rowFilter.event.description"];
          geom?: parameters["rowFilter.event.geom"];
          style?: parameters["rowFilter.event.style"];
          day_id?: parameters["rowFilter.event.day_id"];
          inserted_at?: parameters["rowFilter.event.inserted_at"];
          public?: parameters["rowFilter.event.public"];
          bounds?: parameters["rowFilter.event.bounds"];
        };
        body: {
          /** event */
          event?: definitions["event"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/stage": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.stage.id"];
          name?: parameters["rowFilter.stage.name"];
          description?: parameters["rowFilter.stage.description"];
          icon_id?: parameters["rowFilter.stage.icon_id"];
          geom?: parameters["rowFilter.stage.geom"];
          event_id?: parameters["rowFilter.stage.event_id"];
          inserted_at?: parameters["rowFilter.stage.inserted_at"];
          public?: parameters["rowFilter.stage.public"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["stage"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** stage */
          stage?: definitions["stage"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.stage.id"];
          name?: parameters["rowFilter.stage.name"];
          description?: parameters["rowFilter.stage.description"];
          icon_id?: parameters["rowFilter.stage.icon_id"];
          geom?: parameters["rowFilter.stage.geom"];
          event_id?: parameters["rowFilter.stage.event_id"];
          inserted_at?: parameters["rowFilter.stage.inserted_at"];
          public?: parameters["rowFilter.stage.public"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.stage.id"];
          name?: parameters["rowFilter.stage.name"];
          description?: parameters["rowFilter.stage.description"];
          icon_id?: parameters["rowFilter.stage.icon_id"];
          geom?: parameters["rowFilter.stage.geom"];
          event_id?: parameters["rowFilter.stage.event_id"];
          inserted_at?: parameters["rowFilter.stage.inserted_at"];
          public?: parameters["rowFilter.stage.public"];
        };
        body: {
          /** stage */
          stage?: definitions["stage"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/asset_type": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.asset_type.id"];
          name?: parameters["rowFilter.asset_type.name"];
          description?: parameters["rowFilter.asset_type.description"];
          inserted_at?: parameters["rowFilter.asset_type.inserted_at"];
          public?: parameters["rowFilter.asset_type.public"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["asset_type"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** asset_type */
          asset_type?: definitions["asset_type"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.asset_type.id"];
          name?: parameters["rowFilter.asset_type.name"];
          description?: parameters["rowFilter.asset_type.description"];
          inserted_at?: parameters["rowFilter.asset_type.inserted_at"];
          public?: parameters["rowFilter.asset_type.public"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.asset_type.id"];
          name?: parameters["rowFilter.asset_type.name"];
          description?: parameters["rowFilter.asset_type.description"];
          inserted_at?: parameters["rowFilter.asset_type.inserted_at"];
          public?: parameters["rowFilter.asset_type.public"];
        };
        body: {
          /** asset_type */
          asset_type?: definitions["asset_type"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/mask": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.mask.id"];
          geom?: parameters["rowFilter.mask.geom"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["mask"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/timetable": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.timetable.id"];
          day_id?: parameters["rowFilter.timetable.day_id"];
          start_time?: parameters["rowFilter.timetable.start_time"];
          end_time?: parameters["rowFilter.timetable.end_time"];
          artist_id?: parameters["rowFilter.timetable.artist_id"];
          stage_id?: parameters["rowFilter.timetable.stage_id"];
          inserted_at?: parameters["rowFilter.timetable.inserted_at"];
          public?: parameters["rowFilter.timetable.public"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["timetable"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** timetable */
          timetable?: definitions["timetable"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.timetable.id"];
          day_id?: parameters["rowFilter.timetable.day_id"];
          start_time?: parameters["rowFilter.timetable.start_time"];
          end_time?: parameters["rowFilter.timetable.end_time"];
          artist_id?: parameters["rowFilter.timetable.artist_id"];
          stage_id?: parameters["rowFilter.timetable.stage_id"];
          inserted_at?: parameters["rowFilter.timetable.inserted_at"];
          public?: parameters["rowFilter.timetable.public"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.timetable.id"];
          day_id?: parameters["rowFilter.timetable.day_id"];
          start_time?: parameters["rowFilter.timetable.start_time"];
          end_time?: parameters["rowFilter.timetable.end_time"];
          artist_id?: parameters["rowFilter.timetable.artist_id"];
          stage_id?: parameters["rowFilter.timetable.stage_id"];
          inserted_at?: parameters["rowFilter.timetable.inserted_at"];
          public?: parameters["rowFilter.timetable.public"];
        };
        body: {
          /** timetable */
          timetable?: definitions["timetable"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/show_limit": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/show_trgm": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            "": string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/table_as_geojson": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: regclass */
            _tbl: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  day_event_mask: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: string;
    /** Format: extensions.geometry */
    geom?: string;
    /** Format: ARRAY */
    bounds?: unknown[];
  };
  icon: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    name: string;
    /** Format: text */
    storage_path?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: boolean
     * @default false
     */
    public?: boolean;
  };
  artist: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    name: string;
    /** Format: text */
    description?: string;
    /** Format: text */
    storage_path?: string;
    /** Format: text */
    spotify?: string;
    /** Format: text */
    tidal?: string;
    /** Format: text */
    apple_music?: string;
    /** Format: text */
    soundcloud?: string;
    /** Format: text */
    youtube?: string;
    /** Format: text */
    instagram?: string;
    /** Format: text */
    facebook?: string;
    /** Format: text */
    webpage?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: boolean
     * @default false
     */
    public?: boolean;
    /** Format: text */
    bandcamp?: string;
    /** Format: tsvector */
    ts?: string;
  };
  asset: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    description?: string;
    /** Format: extensions.geometry(Point,4326) */
    geom?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `asset_type.id`.<fk table='asset_type' column='id'/>
     */
    asset_type_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `icon.id`.<fk table='icon' column='id'/>
     */
    icon_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `event.id`.<fk table='event' column='id'/>
     */
    event_id: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: boolean
     * @default false
     */
    public?: boolean;
  };
  day: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: date */
    day: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: boolean
     * @default false
     */
    public?: boolean;
    /** Format: text */
    name?: string;
    /** Format: text */
    description?: string;
  };
  event: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    name: string;
    /** Format: text */
    description?: string;
    /** Format: extensions.geometry(Polygon,4326) */
    geom?: string;
    /** Format: jsonb */
    style?: unknown;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `day.id`.<fk table='day' column='id'/>
     */
    day_id: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: boolean
     * @default false
     */
    public?: boolean;
    /** Format: ARRAY */
    bounds?: unknown[];
  };
  stage: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    name: string;
    /** Format: text */
    description?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `icon.id`.<fk table='icon' column='id'/>
     */
    icon_id?: string;
    /** Format: extensions.geometry(Point,4326) */
    geom?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `event.id`.<fk table='event' column='id'/>
     */
    event_id: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: boolean
     * @default false
     */
    public?: boolean;
  };
  asset_type: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    name: string;
    /** Format: text */
    description?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: boolean
     * @default false
     */
    public?: boolean;
  };
  mask: {
    /** Format: bigint */
    id?: number;
    /** Format: extensions.geometry */
    geom?: string;
  };
  timetable: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `day.id`.<fk table='day' column='id'/>
     */
    day_id: string;
    /** Format: timestamp with time zone */
    start_time: string;
    /** Format: timestamp with time zone */
    end_time: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `artist.id`.<fk table='artist' column='id'/>
     */
    artist_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `stage.id`.<fk table='stage' column='id'/>
     */
    stage_id: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    inserted_at: string;
    /**
     * Format: boolean
     * @default false
     */
    public?: boolean;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description day_event_mask */
  "body.day_event_mask": definitions["day_event_mask"];
  /** Format: uuid */
  "rowFilter.day_event_mask.id": string;
  /** Format: extensions.geometry */
  "rowFilter.day_event_mask.geom": string;
  /** Format: ARRAY */
  "rowFilter.day_event_mask.bounds": string;
  /** @description icon */
  "body.icon": definitions["icon"];
  /** Format: uuid */
  "rowFilter.icon.id": string;
  /** Format: text */
  "rowFilter.icon.name": string;
  /** Format: text */
  "rowFilter.icon.storage_path": string;
  /** Format: timestamp with time zone */
  "rowFilter.icon.inserted_at": string;
  /** Format: boolean */
  "rowFilter.icon.public": string;
  /** @description artist */
  "body.artist": definitions["artist"];
  /** Format: uuid */
  "rowFilter.artist.id": string;
  /** Format: text */
  "rowFilter.artist.name": string;
  /** Format: text */
  "rowFilter.artist.description": string;
  /** Format: text */
  "rowFilter.artist.storage_path": string;
  /** Format: text */
  "rowFilter.artist.spotify": string;
  /** Format: text */
  "rowFilter.artist.tidal": string;
  /** Format: text */
  "rowFilter.artist.apple_music": string;
  /** Format: text */
  "rowFilter.artist.soundcloud": string;
  /** Format: text */
  "rowFilter.artist.youtube": string;
  /** Format: text */
  "rowFilter.artist.instagram": string;
  /** Format: text */
  "rowFilter.artist.facebook": string;
  /** Format: text */
  "rowFilter.artist.webpage": string;
  /** Format: timestamp with time zone */
  "rowFilter.artist.inserted_at": string;
  /** Format: boolean */
  "rowFilter.artist.public": string;
  /** Format: text */
  "rowFilter.artist.bandcamp": string;
  /** Format: tsvector */
  "rowFilter.artist.ts": string;
  /** @description asset */
  "body.asset": definitions["asset"];
  /** Format: uuid */
  "rowFilter.asset.id": string;
  /** Format: text */
  "rowFilter.asset.description": string;
  /** Format: extensions.geometry(Point,4326) */
  "rowFilter.asset.geom": string;
  /** Format: uuid */
  "rowFilter.asset.asset_type_id": string;
  /** Format: uuid */
  "rowFilter.asset.icon_id": string;
  /** Format: uuid */
  "rowFilter.asset.event_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.asset.inserted_at": string;
  /** Format: boolean */
  "rowFilter.asset.public": string;
  /** @description day */
  "body.day": definitions["day"];
  /** Format: uuid */
  "rowFilter.day.id": string;
  /** Format: date */
  "rowFilter.day.day": string;
  /** Format: timestamp with time zone */
  "rowFilter.day.inserted_at": string;
  /** Format: boolean */
  "rowFilter.day.public": string;
  /** Format: text */
  "rowFilter.day.name": string;
  /** Format: text */
  "rowFilter.day.description": string;
  /** @description event */
  "body.event": definitions["event"];
  /** Format: uuid */
  "rowFilter.event.id": string;
  /** Format: text */
  "rowFilter.event.name": string;
  /** Format: text */
  "rowFilter.event.description": string;
  /** Format: extensions.geometry(Polygon,4326) */
  "rowFilter.event.geom": string;
  /** Format: jsonb */
  "rowFilter.event.style": string;
  /** Format: uuid */
  "rowFilter.event.day_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.event.inserted_at": string;
  /** Format: boolean */
  "rowFilter.event.public": string;
  /** Format: ARRAY */
  "rowFilter.event.bounds": string;
  /** @description stage */
  "body.stage": definitions["stage"];
  /** Format: uuid */
  "rowFilter.stage.id": string;
  /** Format: text */
  "rowFilter.stage.name": string;
  /** Format: text */
  "rowFilter.stage.description": string;
  /** Format: uuid */
  "rowFilter.stage.icon_id": string;
  /** Format: extensions.geometry(Point,4326) */
  "rowFilter.stage.geom": string;
  /** Format: uuid */
  "rowFilter.stage.event_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.stage.inserted_at": string;
  /** Format: boolean */
  "rowFilter.stage.public": string;
  /** @description asset_type */
  "body.asset_type": definitions["asset_type"];
  /** Format: uuid */
  "rowFilter.asset_type.id": string;
  /** Format: text */
  "rowFilter.asset_type.name": string;
  /** Format: text */
  "rowFilter.asset_type.description": string;
  /** Format: timestamp with time zone */
  "rowFilter.asset_type.inserted_at": string;
  /** Format: boolean */
  "rowFilter.asset_type.public": string;
  /** @description mask */
  "body.mask": definitions["mask"];
  /** Format: bigint */
  "rowFilter.mask.id": string;
  /** Format: extensions.geometry */
  "rowFilter.mask.geom": string;
  /** @description timetable */
  "body.timetable": definitions["timetable"];
  /** Format: uuid */
  "rowFilter.timetable.id": string;
  /** Format: uuid */
  "rowFilter.timetable.day_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.timetable.start_time": string;
  /** Format: timestamp with time zone */
  "rowFilter.timetable.end_time": string;
  /** Format: uuid */
  "rowFilter.timetable.artist_id": string;
  /** Format: uuid */
  "rowFilter.timetable.stage_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.timetable.inserted_at": string;
  /** Format: boolean */
  "rowFilter.timetable.public": string;
}

export interface operations {}

export interface external {}
